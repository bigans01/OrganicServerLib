#pragma once

#ifndef OSCONTOUREDTRIANGLE_H
#define OSCONTOUREDTRIANGLE_H

#include "OSTrianglePoint.h"
#include "EnclaveKeyDef.h"
#include "TriangleLine.h"
#include "ECBBorderValues.h"
#include "PolyUtils.h"
#include "PrimarySegmentTracker.h"
#include "ECBPoly.h"
#include <unordered_map>
#include <math.h>
#include "PrimaryCircuit.h"
#include "ForgedPolyRegistry.h"
#include "EmptyNormalFinder.h"
#include <glm/glm.hpp>
#include "CalibratableBlueprintKeyPair.h"
#include "ECBPolyType.h"

class OSContouredTriangle {
public:
	OSContouredTriangle();
	OSContouredTriangle(ECBPolyPoint in_point0, ECBPolyPoint in_point1, ECBPolyPoint in_point2, TriangleMaterial in_materialID, ECBPolyPoint in_massReferencePoint, ForgedPolyRegistry* in_forgedPolyRegistryRef, ECBPolyType in_polyType);

	ECBPolyPoint trianglePoints[3];					// stores 3 points
	TriangleLine triangleLines[3];					// stores 3 lines
	EnclaveKeyDef::EnclaveKey pointKeys[3];			// stores the keys of the 3 points
	ECBPolyPoint contouredEmptyNormal;				// stores the empty normal that will be passed on to polys spawned by this contoured triangle; should be calculated during the OSContouredTriangle's instantiation/construction
	ForgedPolyRegistry* forgedPolyRegistryRef;		// a reference to the forged poly registry that belongs to the parent contour plan (which spawns this contoured triangle)
	CalibratableBlueprintKeyPair keyPairArray[3];
	ECBPolyType contouredPolyType = ECBPolyType::FREE;	// default value is FREE, but constructor for triangle should always take in a value to set.
	ECBPolyPoint centroid;								// stores the centroid of the triangle.
	std::unordered_map<EnclaveKeyDef::EnclaveKey, int, EnclaveKeyDef::KeyHasher> polygonPieceMap;			// stores the ID of the corresponding ECBPolygon(s) related to this instance of OSContouredTriangle, the ID of which is found in each blueprint.	
	std::unordered_map<EnclaveKeyDef::EnclaveKey, int, EnclaveKeyDef::KeyHasher> tracedBlueprintCountMap;	// stores how many TriangleLines of this OSContouredTriangle have traced a blueprint having a particular key;
																											// Any value of 1 here indicates that OSContouredTriangleRunner::fillBlueprintArea will use it to attempt to fill the 
																											// area within the OSContourdTriangle.
	std::unordered_map<EnclaveKeyDef::EnclaveKey, int, EnclaveKeyDef::KeyHasher> filledBlueprintMap;		// stores blueprint IDs that were filled when attempting to fill the OSContouredTriangle's area.
	std::unordered_map<EnclaveKeyDef::EnclaveKey, PrimaryCircuit, EnclaveKeyDef::KeyHasher> primarySegmentTrackerMap;
	TriangleMaterial materialID = TriangleMaterial::NOVAL;						// what is the material made of? stone, brick, snow, dirt, etc?
	bool containedWithinSameBlueprint = false;	// set by call to checkIfPointsAreinSameBlueprint

	void addPolygonPiece(EnclaveKeyDef::EnclaveKey in_Key, int in_pieceType);
	void insertTracedBlueprint(EnclaveKeyDef::EnclaveKey in_key);
	bool checkIfPointsAreInSameBlueprint();
	void addNewPrimarySegment(ECBPolyPoint in_lineSegmentPointA, ECBPolyPoint in_lineSegmentPointB, int in_lineID, EnclaveKeyDef::EnclaveKey in_blueprintKey);
	void fillMetaDataInPrimaryCircuits();
	void printPrimarySegmentData();
	void printKeyPairArray();
	int isPerfectlyClamped();		// returns "1" if the triangle is perfectly clamped, in any way.
	int getPerfectClampValue();
private:
	ECBPolyPoint massReferencePoint;				// mass reference point that will be copied to all ECBPolys generated by this contoured triangle.
	char contouredTrianglePerfectClampValue = 0;	// 0 if there is no clamping; 1 if clamped to X, 2 if clamped to Y, 3 if clamped to Z.
	void determineLineSlopes();						// determine the X/Y/Z slopes for each TriangleLine.
	void determineAxisInterceptDistancesDebug();
	void determineCentroid();			// find the centroid for this triangle
	void determinePointKeys();			// determine the point keys.
	void loadAndCalibrateKeyPairArray();
	void checkForPerfectClamping();					// sets the value of contouredTrainglePerfectClampValue
	void adjustPointKeysIfPerfectlyAlignedToECBBorders();	// this will need a rework/need to be tested at a later date (3/14/2021); it is intended to check for
															// any adjustments to OSContouredTriangles which are perfectly clamped to any EnclaveCollectionBlueprint border face
};

#endif